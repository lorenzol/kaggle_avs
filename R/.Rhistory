rf.grid <- data.frame(.mtry = c(2,3,4))
earth.tune <- train(repeater ~ .,
data = train.batch,
model = "bagEarth",
metric = "ROC",
maximize = FALSE,
tuneGrid = rf.grid,
trControl = cv.ctrl)
earth.tune
earth.tune.pred <- predict(earth.tune, test.batch)
confusionMatrix(earth.tune.pred, test.batch$repeater)
load(file="test.RData")
repeater_earth <- predict(earth.tune, newdata = test, type="prob")
repeater_earth <- data.frame(cbind("id" = test$id, "repeatProbability" = repeater_earth$t))
write.csv(repeater_earth, file="earth_tune_model1.csv", row.names=FALSE, quote=FALSE)
#set working directory
setwd("C:/Users/lorenzol/Google Drive/Kaggle/AVS/R") # at home
source("avs_data.R")
#for model evaluation
#install.packages("e1071")
library(e1071)
#Fitting a Model
#######################################################
## split training data into train batch and test batch
#caret: Classification and Regression Training
#install.packages("caret")
library(caret)
set.seed(23)
training.rows <- createDataPartition(train$repeater,
p = 0.05, list = FALSE)
col_names <- as.data.frame(names(train))
#1:id, 2:chain, 3:offer, 4:market, 5:offervalue, 6:offerdate
train.batch <- train[training.rows, c(3:167) ]
test.batch <- train[-training.rows, c(3:167) ]
rm(training.rows)
rm(train)
gc()   #to "flush" memory before you run your script.
#Modeling
#########################################################
#install.packages("pROC")
library(pROC)
## Define control function to handle optional arguments for train function
## Models to be assessed based on largest absolute area under ROC curve
## For Accuracy, uncomment classProbs = TRUE, and summaryFunction = twoClassSummary
cv.ctrl <- trainControl(method = "repeatedcv",  # cross validation
#method = "cv",        # choose 1 method
#method = "boot",       #
number = 2,            # 10 fold
repeats = 1,            # 3 seperate
returnResamp = "all",
classProbs = TRUE,
summaryFunction = twoClassSummary
)
# earth model
#######################################
set.seed(825)
rf.grid <- data.frame(.mtry = c(2,3,4))
earth.tune <- train(repeater ~ .,
data = train.batch,
model = "bagEarth",
metric = "ROC",
maximize = FALSE,
tuneGrid = rf.grid,
trControl = cv.ctrl)
earth.tune
load(file="test.RData")
repeater_earth <- predict(earth.tune, newdata = test, type="prob")
repeater_earth <- data.frame(cbind("id" = test$id, "repeatProbability" = repeater_earth$t))
write.csv(repeater_earth, file="earth_tune_model1.csv", row.names=FALSE, quote=FALSE)
# Lorenzo Luciano
# June 3, 2014
# AVS data on Kaggle
#set working directory
setwd("C:/Users/lorenzol/Google Drive/Kaggle/AVS/R") # at home
#import train and test dataset
train <- read.csv("./data/train.csv", comment.char="")
test <- read.csv("./data/test.csv", comment.char="")
train_r <- train[, c("id", "chain", "repeater")] # temporary store repeater value
comb <- rbind(train[,c(1:3,5:175)], test)
# Change NULLS to 0 for analysis
######################################
comb[is.na(comb)] <- 0
#Seperate Comb into train and test
######################################
train <- comb[c(1:160057),]
test <- comb[c(160058:311541),]
train$repeater <- train_r$repeater
#train$repeater <- relevel(train$repeater, ref="1")
rm(comb) # remove comb variable
rm(train_r) # remove train_r
save(test, file="test.RData")  # save test to fiel while not needed
rm(test)
#for model evaluation
#install.packages("e1071")
library(e1071)
#Fitting a Model
#######################################################
## split training data into train batch and test batch
#caret: Classification and Regression Training
#install.packages("caret")
library(caret)
set.seed(23)
training.rows <- createDataPartition(train$repeater,
p = 0.10, list = FALSE)
col_names <- as.data.frame(names(train))
#1:id, 2:chain, 3:offer, 4:market, 5:offervalue, 6:offerdate
train.batch <- train[training.rows, c(3:175) ]
test.batch <- train[-training.rows, c(3:175) ]
rm(training.rows)
rm(train)
gc()   #to "flush" memory before you run your script.
#Modeling
#########################################################
#install.packages("pROC")
library(pROC)
## Define control function to handle optional arguments for train function
## Models to be assessed based on largest absolute area under ROC curve
## For Accuracy, uncomment classProbs = TRUE, and summaryFunction = twoClassSummary
cv.ctrl <- trainControl(method = "repeatedcv",  # cross validation
#method = "cv",        # choose 1 method
#method = "boot",       #
number = 2,            # 10 fold
repeats = 1,            # 3 seperate
returnResamp = "all",
classProbs = TRUE,
summaryFunction = twoClassSummary
)
# earth model
#######################################
set.seed(825)
rf.grid <- data.frame(.mtry = c(2,3,4))
earth.tune <- train(repeater ~ .,
data = train.batch,
model = "bagEarth",
metric = "ROC",
maximize = FALSE,
tuneGrid = rf.grid,
trControl = cv.ctrl)
earth.tune
load(file="test.RData")
repeater_earth <- predict(earth.tune, newdata = test, type="prob")
repeater_earth <- data.frame(cbind("id" = test$id, "repeatProbability" = repeater_earth$t))
write.csv(repeater_earth, file="earth_tune_model1.csv", row.names=FALSE, quote=FALSE)
# Lorenzo Luciano
# June 3, 2014
# AVS data on Kaggle
#set working directory
setwd("C:/Users/lorenzol/Google Drive/Kaggle/AVS/R") # at home
#import train and test dataset
train <- read.csv("./data/train.csv", comment.char="")
test <- read.csv("./data/test.csv", comment.char="")
train_r <- train[, c("id", "chain", "repeater")] # temporary store repeater value
comb <- rbind(train[,c(1:3,5:173)], test)
# Change NULLS to 0 for analysis
######################################
comb[is.na(comb)] <- 0
#Seperate Comb into train and test
######################################
train <- comb[c(1:160057),]
test <- comb[c(160058:311541),]
train$repeater <- train_r$repeater
#train$repeater <- relevel(train$repeater, ref="1")
rm(comb) # remove comb variable
rm(train_r) # remove train_r
save(test, file="test.RData")  # save test to fiel while not needed
rm(test)
#for model evaluation
#install.packages("e1071")
library(e1071)
#Fitting a Model
#######################################################
## split training data into train batch and test batch
#caret: Classification and Regression Training
#install.packages("caret")
library(caret)
set.seed(23)
training.rows <- createDataPartition(train$repeater,
p = 0.10, list = FALSE)
col_names <- as.data.frame(names(train))
#1:id, 2:chain, 3:offer, 4:market, 5:offervalue, 6:offerdate
train.batch <- train[training.rows, c(3:173) ]
test.batch <- train[-training.rows, c(3:173) ]
rm(training.rows)
rm(train)
gc()   #to "flush" memory before you run your script.
#Modeling
#########################################################
#install.packages("pROC")
library(pROC)
## Define control function to handle optional arguments for train function
## Models to be assessed based on largest absolute area under ROC curve
## For Accuracy, uncomment classProbs = TRUE, and summaryFunction = twoClassSummary
cv.ctrl <- trainControl(method = "repeatedcv",  # cross validation
#method = "cv",        # choose 1 method
#method = "boot",       #
number = 2,            # 10 fold
repeats = 1,            # 3 seperate
returnResamp = "all",
classProbs = TRUE,
summaryFunction = twoClassSummary
)
# earth model
#######################################
set.seed(825)
rf.grid <- data.frame(.mtry = c(2,3,4))
earth.tune <- train(repeater ~ .,
data = train.batch,
model = "bagEarth",
metric = "ROC",
maximize = FALSE,
tuneGrid = rf.grid,
trControl = cv.ctrl)
earth.tune
load(file="test.RData")
repeater_earth <- predict(earth.tune, newdata = test, type="prob")
repeater_earth <- data.frame(cbind("id" = test$id, "repeatProbability" = repeater_earth$t))
write.csv(repeater_earth, file="earth_tune_model1.csv", row.names=FALSE, quote=FALSE)
# Lorenzo Luciano
# June 3, 2014
# AVS data on Kaggle
#set working directory
setwd("C:/Users/lorenzol/Google Drive/Kaggle/AVS/R") # at home
#import train and test dataset
train <- read.csv("./data/train.csv", comment.char="")
test <- read.csv("./data/test.csv", comment.char="")
train_r <- train[, c("id", "chain", "repeater")] # temporary store repeater value
comb <- rbind(train[,c(1:3,5:179)], test)
# Change NULLS to 0 for analysis
######################################
comb[is.na(comb)] <- 0
#Seperate Comb into train and test
######################################
train <- comb[c(1:160057),]
test <- comb[c(160058:311541),]
train$repeater <- train_r$repeater
#train$repeater <- relevel(train$repeater, ref="1")
rm(comb) # remove comb variable
rm(train_r) # remove train_r
save(test, file="test.RData")  # save test to fiel while not needed
rm(test)
#for model evaluation
#install.packages("e1071")
library(e1071)
#Fitting a Model
#######################################################
## split training data into train batch and test batch
#caret: Classification and Regression Training
#install.packages("caret")
library(caret)
set.seed(23)
training.rows <- createDataPartition(train$repeater,
p = 0.10, list = FALSE)
col_names <- as.data.frame(names(train))
#1:id, 2:chain, 3:offer, 4:market, 5:offervalue, 6:offerdate
train.batch <- train[training.rows, c(3:179) ]
test.batch <- train[-training.rows, c(3:179) ]
rm(training.rows)
rm(train)
gc()   #to "flush" memory before you run your script.
#Modeling
#########################################################
#install.packages("pROC")
library(pROC)
## Define control function to handle optional arguments for train function
## Models to be assessed based on largest absolute area under ROC curve
## For Accuracy, uncomment classProbs = TRUE, and summaryFunction = twoClassSummary
cv.ctrl <- trainControl(method = "repeatedcv",  # cross validation
#method = "cv",        # choose 1 method
#method = "boot",       #
number = 2,            # 10 fold
repeats = 1,            # 3 seperate
returnResamp = "all",
classProbs = TRUE,
summaryFunction = twoClassSummary
)
# earth model
#######################################
set.seed(825)
rf.grid <- data.frame(.mtry = c(2,3))
earth.tune <- train(repeater ~ .,
data = train.batch,
model = "bagEarth",
metric = "ROC",
maximize = FALSE,
tuneGrid = rf.grid,
trControl = cv.ctrl)
earth.tune
load(file="test.RData")
repeater_earth <- predict(earth.tune, newdata = test, type="prob")
repeater_earth <- data.frame(cbind("id" = test$id, "repeatProbability" = repeater_earth$t))
write.csv(repeater_earth, file="earth_tune_model1.csv", row.names=FALSE, quote=FALSE)
# Lorenzo Luciano
# June 3, 2014
# AVS data on Kaggle
#set working directory
setwd("C:/Users/lorenzol/Google Drive/Kaggle/AVS/R") # at home
#import train and test dataset
train <- read.csv("./data/train.csv", comment.char="")
test <- read.csv("./data/test.csv", comment.char="")
train_r <- train[, c("id", "chain", "repeater")] # temporary store repeater value
comb <- rbind(train[,c(1:3,5:167)], test)
# Change NULLS to 0 for analysis
######################################
comb[is.na(comb)] <- 0
#Seperate Comb into train and test
######################################
train <- comb[c(1:160057),]
test <- comb[c(160058:311541),]
train$repeater <- train_r$repeater
#train$repeater <- relevel(train$repeater, ref="1")
rm(comb) # remove comb variable
rm(train_r) # remove train_r
save(test, file="test.RData")  # save test to fiel while not needed
rm(test)
#for model evaluation
#install.packages("e1071")
library(e1071)
#Fitting a Model
#######################################################
## split training data into train batch and test batch
#caret: Classification and Regression Training
#install.packages("caret")
library(caret)
set.seed(23)
training.rows <- createDataPartition(train$repeater,
p = 0.10, list = FALSE)
col_names <- as.data.frame(names(train))
#1:id, 2:chain, 3:offer, 4:market, 5:offervalue, 6:offerdate
train.batch <- train[training.rows, c(3:167) ]
test.batch <- train[-training.rows, c(3:167) ]
rm(training.rows)
rm(train)
gc()   #to "flush" memory before you run your script.
#########################################################
#install.packages("pROC")
library(pROC)
## Define control function to handle optional arguments for train function
## Models to be assessed based on largest absolute area under ROC curve
## For Accuracy, uncomment classProbs = TRUE, and summaryFunction = twoClassSummary
cv.ctrl <- trainControl(method = "repeatedcv",  # cross validation
#method = "cv",        # choose 1 method
#method = "boot",       #
number = 10,            # 10 fold
repeats = 3,            # 3 seperate
returnResamp = "all",
classProbs = TRUE,
summaryFunction = twoClassSummary
)
# earth model
#######################################
set.seed(825)
rf.grid <- data.frame(.mtry = c(2))
earth.tune <- train(repeater ~ .,
data = train.batch,
model = "bagEarth",
metric = "ROC",
maximize = FALSE,
tuneGrid = rf.grid,
trControl = cv.ctrl)
earth.tune
load(file="test.RData")
repeater_earth <- predict(earth.tune, newdata = test, type="prob")
repeater_earth <- data.frame(cbind("id" = test$id, "repeatProbability" = repeater_earth$t))
write.csv(repeater_earth, file="earth_tune_model1.csv", row.names=FALSE, quote=FALSE)
# Lorenzo Luciano
# June 3, 2014
# AVS data on Kaggle
#set working directory
setwd("C:/Users/lorenzol/Google Drive/Kaggle/AVS/R") # at home
#import train and test dataset
train <- read.csv("./data/train.csv", comment.char="")
test <- read.csv("./data/test.csv", comment.char="")
train_r <- train[, c("id", "chain", "repeater")] # temporary store repeater value
comb <- rbind(train[,c(1:3,5:172)], test)
# Change NULLS to 0 for analysis
######################################
comb[is.na(comb)] <- 0
#Seperate Comb into train and test
######################################
train <- comb[c(1:160057),]
test <- comb[c(160058:311541),]
train$repeater <- train_r$repeater
#train$repeater <- relevel(train$repeater, ref="1")
rm(comb) # remove comb variable
rm(train_r) # remove train_r
save(test, file="test.RData")  # save test to fiel while not needed
rm(test)
#for model evaluation
#install.packages("e1071")
library(e1071)
#Fitting a Model
#######################################################
## split training data into train batch and test batch
#caret: Classification and Regression Training
#install.packages("caret")
library(caret)
set.seed(23)
training.rows <- createDataPartition(train$repeater,
p = 0.10, list = FALSE)
col_names <- as.data.frame(names(train))
#1:id, 2:chain, 3:offer, 4:market, 5:offervalue, 6:offerdate
train.batch <- train[training.rows, c(3:172) ]
test.batch <- train[-training.rows, c(3:172) ]
rm(training.rows)
rm(train)
gc()   #to "flush" memory before you run your script.
#Modeling
#########################################################
#install.packages("pROC")
library(pROC)
## Define control function to handle optional arguments for train function
## Models to be assessed based on largest absolute area under ROC curve
## For Accuracy, uncomment classProbs = TRUE, and summaryFunction = twoClassSummary
cv.ctrl <- trainControl(method = "repeatedcv",  # cross validation
#method = "cv",        # choose 1 method
#method = "boot",       #
number = 2,            # 10 fold
repeats = 1,            # 3 seperate
returnResamp = "all",
classProbs = TRUE,
summaryFunction = twoClassSummary
)
# earth model
#######################################
set.seed(825)
rf.grid <- data.frame(.mtry = c(2))
earth.tune <- train(repeater ~ .,
data = train.batch,
model = "bagEarth",
metric = "ROC",
maximize = FALSE,
tuneGrid = rf.grid,
trControl = cv.ctrl)
earth.tune
load(file="test.RData")
repeater_earth <- predict(earth.tune, newdata = test, type="prob")
repeater_earth <- data.frame(cbind("id" = test$id, "repeatProbability" = repeater_earth$t))
write.csv(repeater_earth, file="earth_tune_model1.csv", row.names=FALSE, quote=FALSE)
# Lorenzo Luciano
# June 3, 2014
# AVS data on Kaggle
#set working directory
setwd("C:/Users/lorenzol/Google Drive/Kaggle/AVS/R") # at home
#import train and test dataset
train <- read.csv("./data/train.csv", comment.char="")
test <- read.csv("./data/test.csv", comment.char="")
train_r <- train[, c("id", "chain", "repeater")] # temporary store repeater value
comb <- rbind(train[,c(1:3,5:234)], test)
# Change NULLS to 0 for analysis
######################################
comb[is.na(comb)] <- 0
#Seperate Comb into train and test
######################################
train <- comb[c(1:160057),]
test <- comb[c(160058:311541),]
train$repeater <- train_r$repeater
#train$repeater <- relevel(train$repeater, ref="1")
rm(comb) # remove comb variable
rm(train_r) # remove train_r
save(test, file="test.RData")  # save test to fiel while not needed
rm(test)
#for model evaluation
#install.packages("e1071")
library(e1071)
#Fitting a Model
#######################################################
## split training data into train batch and test batch
#caret: Classification and Regression Training
#install.packages("caret")
library(caret)
set.seed(23)
training.rows <- createDataPartition(train$repeater,
p = 0.10, list = FALSE)
col_names <- as.data.frame(names(train))
#1:id, 2:chain, 3:offer, 4:market, 5:offervalue, 6:offerdate
train.batch <- train[training.rows, c(3:234) ]
test.batch <- train[-training.rows, c(3:234) ]
rm(training.rows)
rm(train)
gc()   #to "flush" memory before you run your script.
#Modeling
#########################################################
#install.packages("pROC")
library(pROC)
## Define control function to handle optional arguments for train function
## Models to be assessed based on largest absolute area under ROC curve
## For Accuracy, uncomment classProbs = TRUE, and summaryFunction = twoClassSummary
cv.ctrl <- trainControl(method = "repeatedcv",  # cross validation
#method = "cv",        # choose 1 method
#method = "boot",       #
number = 2,            # 10 fold
repeats = 1,            # 3 seperate
returnResamp = "all",
classProbs = TRUE,
summaryFunction = twoClassSummary
)
# earth model
#######################################
set.seed(825)
rf.grid <- data.frame(.mtry = c(2))
earth.tune <- train(repeater ~ .,
data = train.batch,
model = "bagEarth",
metric = "ROC",
maximize = FALSE,
tuneGrid = rf.grid,
trControl = cv.ctrl)
earth.tune
load(file="test.RData")
repeater_earth <- predict(earth.tune, newdata = test, type="prob")
repeater_earth <- data.frame(cbind("id" = test$id, "repeatProbability" = repeater_earth$t))
write.csv(repeater_earth, file="earth_tune_model1.csv", row.names=FALSE, quote=FALSE)
